@page "/Order/Display/{Id:int}"
@inject IFoodData _foodData
@inject IOrderData _orderData
@inject NavigationManager _navigationManager

@using BlazorServerDemoApp.Models

<h3>Display</h3>

@if(recordNotFound)
{
	<h4>No Record Found!</h4>
}
else if(order is null)
{
	<h4>Record Loading...</h4>
}
else
{
	<table class="table">
		<tbody>
			<tr>
				<td><strong>Order Name</strong></td>
				<td>@order.OrderName</td>
			</tr>
			<tr>
				<td><strong>Order Date</strong></td>
				<td>@order.OrderDate</td>
			</tr>
			<tr>
				<td><strong>Order Total</strong></td>
				<td>@string.Format("{0:C}", order.Total)</td>
			</tr>
			<tr>
				<td><strong>Item Ordered</strong></td>
				<td>@itemPurchased</td>
			</tr>
			<tr>
				<td><strong>Quantity Ordered</strong></td>
				<td>@order.Quantity</td>
			</tr>
			<tr>
				<td colspan="2">
					@if(confirmDelete)
					{
						<button class="btn btn-outline-danger" @onclick="HandleDeleteRecord">
							Confirm Delete
						</button>
						<button class="btn btn-secondary" @onclick="(() => confirmDelete=false)">
							Cancel
						</button>
					} else
					{
						<button class="btn btn-danger" @onclick="(() => confirmDelete=true)">
							Delete Order
						</button>
					}
				</td>
			</tr>
		</tbody>
	</table>
	<EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary Model="@updateModel" />

		<div class="form-group">
			<label class="control-lable">Name for Order</label>
			<InputText @bind-Value="updateModel.OrderName" class="form-control" />
			<ValidationMessage For="@(() => updateModel.OrderName)" class="text-dange" />
		</div>
		<div class="form-group">
			<input type="submit" value="Update Order Name" class="btn btn-primary" />
		</div>
	</EditForm>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private OrderModel order;
	private string itemPurchased;
	private OrderUpdateModel updateModel = new OrderUpdateModel();
	private bool confirmDelete = false;
	private bool recordNotFound = false;

	protected override async Task OnInitializedAsync()
	{
		order = await _orderData.GetOrderById(Id);

		if(order != null)
		{
			var food = await _foodData.GetFood();
			itemPurchased = food.Where(x => x.Id == order.FoodId).FirstOrDefault()?.Title;

			updateModel.Id = order.Id;
			updateModel.OrderName = order.OrderName;
		}
		else
		{
			recordNotFound = true;
		}
	}

	private async Task HandleValidSubmit()
	{
		await _orderData.UpdateOrderName(updateModel.Id, updateModel.OrderName);
		order.OrderName = updateModel.OrderName;
	}

	private async Task HandleDeleteRecord()
	{
		await _orderData.DeleteOrder(Id);
		confirmDelete = false;
		_navigationManager.NavigateTo("food/list");
	}
}
