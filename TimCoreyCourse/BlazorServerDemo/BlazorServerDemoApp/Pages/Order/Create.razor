@page "/Order/Create"
@inject IFoodData _foodData
@inject IOrderData _orderData
@inject NavigationManager _navigationManager

<h3>Create</h3>

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary Model="@order" />
	<div class="form-group">
		<label class="control-label">Item to Order</label>
		<select @onchange="FoodItemChange" class="form-control">
			<option value="">Select a meal...</option>
			@foreach(var f in foodItems)
			{
				<option value="@f.Id">@f.Title</option>
			}
		</select>
	</div>
	<div class="form-group">
		<label class="control-lable">Quantity</label>
		<InputNumber @bind-Value="order.Quantity" class="form-control" />
		<ValidationMessage For="@(() => order.Quantity)" class="text-dange" />
	</div>
		<div class="form-group">
		<label class="control-lable">Name for Order</label>
		<InputText @bind-Value="order.OrderName" class="form-control" />
		<ValidationMessage For="@(() => order.OrderName)" class="text-dange" />
	</div>
	<div class="form-group">
		<input type="submit" value="Order Food" class="btn btn-primary" />
	</div>
</EditForm>

@code {
	private OrderModel order = new OrderModel();
	private List<FoodModel> foodItems = new List<FoodModel>();


	protected async override Task OnParametersSetAsync()
	{
		foodItems = await _foodData.GetFood();
	}

	private void FoodItemChange(ChangeEventArgs e)
	{
		if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
		{
			order.FoodId = int.Parse(e.Value.ToString());
		}
		else
		{
			order.FoodId = 0;
		}
	}

	private async Task HandleValidSubmit()
	{
		order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;

		int id = await _orderData.CreateOrder(order);

		_navigationManager.NavigateTo($"order/display/{id}");
	}
}
